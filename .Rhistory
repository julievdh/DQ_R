row
View(data)
for (row in 2:length(raceGeo)) {
data$lat[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lat
data$lon[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lng
}
row
data <- read.csv("UCI2018.csv",header=FALSE, stringsAsFactors=FALSE, fileEncoding="latin1")
colnames(data) = c("date","Race","Location","Country","Class")
data$cityCTRY <- do.call(paste, c(data[c("Location", "Country")], sep = ", "))
for (row in 2:length(raceGeo)) {
data$lat[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lat
data$lon[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lng
}
for (row in 2:length(raceGeo)) {
lat[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lat
lon[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lng
}
lat <- c()
lon <- c()
for (row in 2:length(raceGeo)) {
lat[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lat
lon[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lng
}
row
library(ggmap) # for geocoding and plotting
library(geosphere) # for distance calculations
library(knitr) # for making a nice table
data <- read.csv("UCI2018.csv",header=FALSE, stringsAsFactors=FALSE, fileEncoding="latin1")
colnames(data) = c("date","Race","Location","Country","Class")
data$cityCTRY <- do.call(paste, c(data[c("Location", "Country")], sep = ", "))
raceGeo <- geocode(data$cityCTRY[2:4], output='all', messaging=TRUE, override_limit=TRUE)
lat <- c()
lon <- c()
for (row in 2:length(raceGeo)) {
lat[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lat
lon[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lng
}
qmplot(lon, lat, data = raceLoc, maptype = "watercolor", color = I("red")) + geom_path(color = "red")
qmplot(lon, lat, maptype = "watercolor", color = I("red")) + geom_path(color = "red")
lat
lon
qmplot(lon[2:3], lat[2:3], maptype = "watercolor", color = I("red")) + geom_path(color = "red")
raceLoc
raceLoc$lat <- lat
raceLoc <- data.frame(lat = lat, lon = lon)
raceLoc
qmplot(lon[2:3], lat[2:3], data = raceLoc, maptype = "watercolor", color = I("red")) + geom_path(color = "red")
raceGeo <- geocode(data$cityCTRY[1:4], output='all', messaging=TRUE, override_limit=TRUE)
lat <- c()
lon <- c()
for (row in 2:length(raceGeo)) {
lat[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lat
lon[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lng
}
qmplot(lon, lat, data = raceLoc, maptype = "watercolor", color = I("red")) + geom_path(color = "red")
raceLoc
raceGeo[[1]]$results
raceGeo[[1]]$results[[1]]$geometry$location
for (row in 1:length(raceGeo)) {
lat[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lat
lon[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lng
}
qmplot(lon, lat, data = raceLoc, maptype = "watercolor", color = I("red")) + geom_path(color = "red")
raceLoc
raceLoc <- data.frame(lat = lat, lon = lon)
raceLoc
for (row in 1:length(raceGeo)) {
lat[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lat
lon[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lng
}
lat
length(raceGeo)
raceGeo <- geocode(data$cityCTRY[1:4], output='all', messaging=TRUE, override_limit=TRUE)
lat <- c()
lon <- c()
for (row in 1:length(raceGeo)) {
lat[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lat
lon[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lng
}
row
raceGeo[[1]]$results
raceGeo <- geocode(data$cityCTRY[1:4], output='all', messaging=TRUE, override_limit=TRUE)
lat <- c()
lon <- c()
for (row in 1:length(raceGeo)) {
lat[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lat
lon[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lng
}
row
raceGeo[[4]]
raceLoc <- data.frame(lat = lat, lon = lon)
qmplot(lon, lat, data = raceLoc, maptype = "watercolor", color = I("red")) + geom_path(color = "red")
raceGeo <- geocode(data$cityCTRY[1:14], output='all', messaging=TRUE, override_limit=TRUE)
raceGeo <- geocode(data$cityCTRY[1:14], output='all', messaging=TRUE, override_limit=TRUE)
lat <- c()
lon <- c()
for (row in 1:length(raceGeo)) {
lat[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lat
lon[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lng
}
raceLoc <- data.frame(lat = lat, lon = lon)
row
raceGeo[[row]]
?geocode
raceGeo <- geocode(data$cityCTRY[1:14], output='all', messaging=TRUE, override_limit=TRUE, client = "AIzaSyB_3udGBiWkWidY8fPLMJ6VONxrth0UAVs")
raceGeo <- geocode(data$cityCTRY[1:14], output='all', messaging=TRUE, override_limit=TRUE, client = "uci-calendar-2018", signature = "AIzaSyB_3udGBiWkWidY8fPLMJ6VONxrth0UAVs")
lat <- c()
lon <- c()
for (row in 1:length(raceGeo)) {
lat[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lat
lon[row] <- raceGeo[[row]]$results[[1]]$geometry$location$lng
}
raceGeo[[1]]$results[[1]]
raceGeo[[1]]$results
raceGeo[[1]]
library(ggmap) # for geocoding and plotting
library(geosphere) # for distance calculations
library(knitr) # for making a nice table
data <- read.csv("UCI2018.csv",header=FALSE, stringsAsFactors=FALSE, fileEncoding="latin1")
colnames(data) = c("date","Race","Location","Country","Class")
data$cityCTRY <- do.call(paste, c(data[c("Location", "Country")], sep = ", "))
raceGeo <- geocode(data$cityCTRY[1:14], output='all', messaging=TRUE, override_limit=TRUE, client = "uci-calendar-2018", signature = "AIzaSyB_3udGBiWkWidY8fPLMJ6VONxrth0UAVs")
raceGeoshort <- geocode(data$cityCTRY[1:14], output = 'latlona')
raceGeoshort
qmplot(lon, lat, data = raceGeoshort, maptype = "watercolor", color = I("red")) + geom_path(color = "red")
raceGeoshort <- geocode(data$cityCTRY, output = 'latlon')
qmplot(lon, lat, data = raceGeoshort, maptype = "watercolor", color = I("red")) + geom_path(color = "red")
?distGeo
ggmap::distGeo
View(raceGeoshort)
library(ggmap) # for geocoding and plotting
library(geosphere) # for distance calculations
library(knitr) # for making a nice table
data <- read.csv("UCI2018.csv",header=FALSE, stringsAsFactors=FALSE, fileEncoding="latin1")
colnames(data) = c("date","Race","Location","Country","Class")
data$cityCTRY <- do.call(paste, c(data[c("Location", "Country")], sep = ", "))
qmplot(lon, lat, data = raceGeoshort, maptype = "watercolor", color = I("red")) + geom_path(color = "red")
library(plotly)
data(canada.cities, package="maps")
p <- ggplot(canada.cities, aes(long, lat)) +
borders(regions="canada", name="borders") +
coord_equal() +
geom_point(aes(text=name, size=pop), colour="red", alpha=1/2, name="cities")
p <- ggplotly(p)
install.packages("plotly")
library(plotly)
data(canada.cities, package="maps")
p <- ggplot(canada.cities, aes(long, lat)) +
borders(regions="canada", name="borders") +
coord_equal() +
geom_point(aes(text=name, size=pop), colour="red", alpha=1/2, name="cities")
p <- ggplotly(p)
devtools::install_github('hadley/ggplot2')
p <- ggplotly(p)
p <- ggplot(canada.cities, aes(long, lat)) +
borders(regions="canada", name="borders") +
coord_equal() +
geom_point(aes(text=name, size=pop), colour="red", alpha=1/2, name="cities")
p <- ggplotly(p)
library(plotly)
library(ggplot2)
p <- ggplotly(p)
data(canada.cities, package="maps")
p <- ggplot(canada.cities, aes(long, lat)) +
borders(regions="canada", name="borders") +
coord_equal() +
geom_point(aes(text=name, size=pop), colour="red", alpha=1/2, name="cities")
p <- ggplot(canada.cities, aes(long, lat)) +
coord_equal() +
geom_point(aes(text=name, size=pop), colour="red", alpha=1/2, name="cities")
library(plotly)
library(ggplot2)
data(canada.cities, package="maps")
p <- ggplot(canada.cities, aes(long, lat)) +
borders(regions="canada", name="borders") +
coord_equal() +
geom_point(aes(text=name, size=pop), colour="red", alpha=1/2, name="cities")
p <- ggplot(canada.cities, aes(long, lat)) +
borders(regions="canada", name="borders") +
coord_equal() +
geom_point(aes(text=name, size=pop), colour="red", alpha=1/2, name="cities")
canada.cities$name
p <- ggplot(canada.cities, aes(long, lat)) +
borders(regions="canada", name="borders") +
coord_equal() +
geom_point(aes(text=canada.cities$name, size=canada.cities$pop), colour="red", alpha=1/2, name="cities")
p <- ggplot(canada.cities, aes(long, lat)) +
coord_equal() +
geom_point(aes(text=canada.cities$name, size=canada.cities$pop), colour="red", alpha=1/2, name="cities")
p <- ggplotly(p)
library(ggplot2)
p <- ggplot(canada.cities, aes(long, lat)) +
coord_equal()
p <- ggplotly(p)
devtools::install_github('hadley/ggplot2'
devtools::install_github('hadley/ggplot2
')
devtools::install_github('hadley/ggplot2')
data(canada.cities, package="maps")
p <- ggplot(canada.cities, aes(long, lat)) +
coord_equal()
p <- ggplotly(p)
p
getwd()
library(readxl)
sightings <- read_xlsx("/Users/julievanderhoop/Documents/MATLAB/UGthesis/Sightings_Tracker_Sheet_subset.xlsx")
sightings.Longitude <- -abs(sightings.Longitude);
sightings <- read_xlsx("/Users/julievanderhoop/Documents/MATLAB/UGthesis/Sightings_Tracker_Sheet_subset.xlsx")
sightings$Longitude <- -abs(sightings$Longitude);
minlat <- 45.5
maxlat <- 51
maxlong <- -57
minlong <- -66
min(sightings$Latitude)
min(sightings$Longitude)
min(na.omit(sightings$Longitude))
?subset.data.frame
ssub <- subset(sightings, Latitude < maxlat)
ssub <- subset(ssub, Latitude > minlat)
ssub <- subset(ssub, Latitude > minlong)
ssub <- subset(ssub, Latitude > minlong)
ssub <- subset(ssub, Latitude < maxlat)
ssub <- subset(ssub, Latitude < maxlong)
maxlong
mean(sightings)
mean(sightings.Longitude)
ssub <- subset(sightings, Latitude < maxlat)
ssub <- subset(ssub, Latitude > minlat)
ssub <- subset(ssub, Longitude > minlong)
ssub <- subset(ssub, Longitude < maxlong)
mean(sightings$Longitude)
mean(na.omit(sightings$Longitude))
maxlong
ssub <- subset(sightings, Latitude < maxlat)
ssub <- subset(ssub, Latitude > minlat)
ssub <- subset(ssub, Longitude > minlong)
ssub <- subset(ssub, Longitude < maxlong)
ssub <- subset(sightings, Latitude < maxlat)
ssub <- subset(ssub, Latitude > minlat)
ssub <- subset(ssub, Longitude > minlong)
ssub <- subset(ssub, Longitude < maxlong)
max(ssub$Longitude)
min(ssub$Longitude)
plot(ssub$Longitude,ssub$Latitude)
install.packages("sp")
install.packages("gstat")
library(sp)
library(gstat)
data(meuse)
glimpse(meuse)
suppressPackageStartupMessages({
library(dplyr) # for "glimpse"
library(ggplot2)
library(scales) # for "comma"
library(magrittr)
})
glimpse(meuse)
meuse %>% as.data.frame %>%
ggplot(aes(x, y)) + geom_point(aes(size=zinc), color="blue", alpha=3/4) +
ggtitle("Zinc Concentration (ppm)") + coord_equal() + theme_bw()
ssub %>% as.data.frame %>%
ggplot(aes(Longitude, Latitude)) + geom_point(aes(size=Number_In_Group), color="blue", alpha=3/4) +
ggtitle("N Whales") + coord_equal() + theme_bw()
class(ssub)
coordinates(ssub) <- ~ Longitude + Latitude
class(ssub)
bbox(ssub)
lzn.vgm <- variogram(log(zinc)~1, meuse) # calculates sample variogram values
lzn.vgm <- variogram(log(Number_In_Group)~1, ssub) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm(1, "Sph", 900, 1)) # fit model
lzn.fit <- fit.variogram(lzn.vgm, model=vgm(1, "Sph", 15, 1)) # fit model
lzn.fit <- fit.variogram(lzn.vgm, model=vgm(1, "Sph")) # fit model
lzn.fit
plot(lzn.vgm, lzn.fit) # plot the sample values, along with the fit model
plot1 <- meuse %>% as.data.frame %>%
ggplot(aes(x, y)) + geom_point(size=1) + coord_equal() +
ggtitle("Points with measurements")
plot2 <- meuse.grid %>% as.data.frame %>%
ggplot(aes(x, y)) + geom_point(size=1) + coord_equal() +
ggtitle("Points at which to estimate")
data("meuse.grid")
plot2 <- meuse.grid %>% as.data.frame %>%
ggplot(aes(x, y)) + geom_point(size=1) + coord_equal() +
ggtitle("Points at which to estimate")
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
coordinates(meuse.grid) <- ~ x + y # step 3 above
lzn.kriged <- krige(log(zinc) ~ 1, meuse, meuse.grid, model=lzn.fit)
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
coordinates(meuse.grid) <- ~ x + y # step 3 above
lzn.kriged <- krige(log(zinc) ~ 1, meuse, meuse.grid, model=lzn.fit)
lzn.vgm <- variogram(log(zinc)~1, meuse) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm(1, "Sph", 900, 1)) # fit model
meuse
zinc
meuse$zinc
lzn.vgm <- variogram(log(zinc)~1, meuse) # calculates sample variogram values
lzn.vgm <- variogram(log(zinc)~1, meuse) # calculates sample variogram values
lzn.vgm <- variogram(log(zinc)~1, meuse,meuse) # calculates sample variogram values
bbox
bbox(ssubs)
bbox(ssub)
st_make_grid(ssub, cellsize = 0.05)
install.packages("sf")
library(sf)
st_make_grid(x, cellsize =0.05)
st_make_grid(ssubs, cellsize =0.05)
st_make_grid(ssub, cellsize =0.05)
GoSLgrid <- st_make_grid(ssub, cellsize =0.05)
plot1 <- ssub %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(size=1) + coord_equal() +
ggtitle("Points with measurements")
ssub.grid <- st_make_grid(ssub, cellsize =0.05)
ssub.grid
plot2 <- ssub.grid %>% as.data.frame %>%
ggplot(aes(x, y)) + geom_point(size=1) + coord_equal() +
ggtitle("Points at which to estimate")
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
ssub.grid
ssub.grid <- st_make_grid(ssub, cellsize =0.05,what = centres)
ssub.grid <- st_make_grid(ssub, cellsize =0.05,what = centers)
ssub.grid <- st_make_grid(ssub, cellsize =0.05,what = "centers")
as.data.frame(ssub.grid)
plot(ssub.grid)
plot2 <- plot(ssub.grid)# %>% as.data.frame %>%
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
plot1 <- ssub %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(size=1) + coord_equal() +
ggtitle("Points with measurements")
plot2 <- plot(ssub.grid)# %>% as.data.frame %>%
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
coordinates(ssub.grid)
class(ssub.grid)
class(ssub)
ssub.grid[1]
makegrid(ssub, cellsize = 0.05)
ssub.grid <- make_grid(ssub, cellsize =0.05)
ssub.grid <- makegrid(ssub, cellsize =0.05)
ssub.grid <- makegrid(ssub, cellsize =0.05)
plot1 <- ssub %>% as.data.frame %>%
ggplot(aes(Latitude, Longitude)) + geom_point(size=1) + coord_equal() +
ggtitle("Points with measurements")
plot2 <- ssub.grid %>% as.data.frame %>%
ggplot(aes(x1, x2)) + geom_point(size=1) + coord_equal() +
ggtitle("Points at which to estimate")
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
plot1 <- ssub %>% as.data.frame %>%
ggplot(aes(Longitude, Latitude)) + geom_point(size=1) + coord_equal() +
ggtitle("Points with measurements")
plot2 <- ssub.grid %>% as.data.frame %>%
ggplot(aes(x1, x2)) + geom_point(size=1) + coord_equal() +
ggtitle("Points at which to estimate")
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
coordinates(meuse.grid) <- ~ x + y # step 3 above
coordinates(ssub.grid) <- ~ x + y # step 3 above
coordinates(ssub.grid) <- ~ x1 + x2 # step 3 above
lzn.vgm <- variogram(log(Number_In_Group)~1, ssub) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm(1, "Sph")) # fit model
plot(lzn.vgm, lzn.fit) # plot the sample values, along with the fit model
coordinates(ssub.grid) <- ~ x1 + x2 # step 3 above
lzn.kriged <- krige(log(Number_In_Group)~1, ssub, ssub.grid, model=lzn.fit)
lzn.kriged %>% as.data.frame %>%
ggplot(aes(x=x, y=y)) + geom_tile(aes(fill=var1.pred)) + coord_equal() +
scale_fill_gradient(low = "yellow", high="red") +
scale_x_continuous(labels=comma) + scale_y_continuous(labels=comma) +
theme_bw()
as.data.frame(lzn.kriged)
plot(lzn.kriged)
warnings()
mean(na.omit(lzn.kriged$var1.pred))
lzn.fit
coordinates
ssub.grid
ssub.grid <- makegrid(ssub, cellsize =0.5)
plot1 <- ssub %>% as.data.frame %>%
ggplot(aes(Longitude, Latitude)) + geom_point(size=1) + coord_equal() +
ggtitle("Points with measurements")
plot2 <- ssub.grid %>% as.data.frame %>%
ggplot(aes(x1, x2)) + geom_point(size=1) + coord_equal() +
ggtitle("Points at which to estimate")
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
coordinates(ssub.grid) <- ~ x1 + x2 # step 3 above
lzn.kriged <- krige(log(Number_In_Group)~1, ssub, ssub.grid, model=lzn.fit)
warnings()
lzn.kriged
ssub.grid$x1
bbox(ssub)
warning()
lzn.kriged <- krige(log(Number_In_Group)~1, ssub, ssub.grid, model=lzn.fit)
warnings()
ssub <- ssuba[-zerodist(ssub)[,1],]
ssub <- ssub[-zerodist(ssub)[,1],]
ssub %>% as.data.frame %>%
ggplot(aes(Longitude, Latitude)) + geom_point(aes(size=Number_In_Group), color="blue", alpha=3/4) +
ggtitle("N Whales") + coord_equal() + theme_bw()
coordinates(ssub) <- ~ Longitude + Latitude
class(ssub)
bbox(ssub)
lzn.vgm <- variogram(log(Number_In_Group)~1, ssub) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm(1, "Sph")) # fit model
plot(lzn.vgm, lzn.fit) # plot the sample values, along with the fit model
ssub.grid <- makegrid(ssub, cellsize =0.5)
plot1 <- ssub %>% as.data.frame %>%
ggplot(aes(Longitude, Latitude)) + geom_point(size=1) + coord_equal() +
ggtitle("Points with measurements")
plot2 <- ssub.grid %>% as.data.frame %>%
ggplot(aes(x1, x2)) + geom_point(size=1) + coord_equal() +
ggtitle("Points at which to estimate")
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
coordinates(ssub.grid) <- ~ x1 + x2 # step 3 above
lzn.kriged <- krige(log(Number_In_Group)~1, ssub, ssub.grid, model=lzn.fit)
lzn.kriged %>% as.data.frame %>%
ggplot(aes(x=x, y=y)) + geom_tile(aes(fill=var1.pred)) + coord_equal() +
scale_fill_gradient(low = "yellow", high="red") +
scale_x_continuous(labels=comma) + scale_y_continuous(labels=comma) +
theme_bw()
lzn.kriged@coords
lzn.kriged@coords[,1]
lzn.kriged %>% as.data.frame %>%
ggplot(aes(x=lzn.kriged@coords[,1], y=lzn.kriged@coords[,2])) + geom_tile(aes(fill=var1.pred)) + coord_equal() +
scale_fill_gradient(low = "yellow", high="red") +
scale_x_continuous(labels=comma) + scale_y_continuous(labels=comma) +
theme_bw()
ssub.grid <- makegrid(ssub, cellsize =0.05)
plot1 <- ssub %>% as.data.frame %>%
ggplot(aes(Longitude, Latitude)) + geom_point(size=1) + coord_equal() +
ggtitle("Points with measurements")
plot2 <- ssub.grid %>% as.data.frame %>%
ggplot(aes(x1, x2)) + geom_point(size=1) + coord_equal() +
ggtitle("Points at which to estimate")
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
coordinates(ssub.grid) <- ~ x1 + x2 # step 3 above
lzn.kriged <- krige(log(Number_In_Group)~1, ssub, ssub.grid, model=lzn.fit)
lzn.kriged %>% as.data.frame %>%
ggplot(aes(x=lzn.kriged@coords[,1], y=lzn.kriged@coords[,2])) + geom_tile(aes(fill=var1.pred)) + coord_equal() +
scale_fill_gradient(low = "yellow", high="red") +
scale_x_continuous(labels=comma) + scale_y_continuous(labels=comma) +
theme_bw()
lzn.kriged %>% as.data.frame %>%
ggplot(aes(x=lzn.kriged@coords[,1], y=lzn.kriged@coords[,2])) + geom_tile(aes(fill=var1.pred)) + coord_equal() +
scale_fill_gradient(low = "blue", high="yellow") +
scale_x_continuous(labels=comma) + scale_y_continuous(labels=comma) +
theme_bw()
lzn.kriged %>% as.data.frame %>%
ggplot(aes(x=lzn.kriged@coords[,1], y=lzn.kriged@coords[,2])) + geom_tile(aes(fill=var1.pred)) + coord_equal() +
scale_fill_gradient(low = "purple", high="yellow") +
scale_x_continuous(labels=comma) + scale_y_continuous(labels=comma) +
theme_bw()
lzn.kriged %>% as.data.frame %>%
ggplot(aes(x=lzn.kriged@coords[,1], y=lzn.kriged@coords[,2])) + geom_tile(aes(fill=var1.pred)) + coord_equal() +
scale_fill_gradient(low = "black", high="yellow") +
scale_x_continuous(labels=comma) + scale_y_continuous(labels=comma) +
theme_bw()
lzn.kriged %>% as.data.frame %>%
ggplot(aes(x=lzn.kriged@coords[,1], y=lzn.kriged@coords[,2])) + geom_tile(aes(fill=var1.pred)) + coord_equal() +
scale_fill_gradient(low = "black", high="yellow") +
scale_x_continuous(labels=comma) + scale_y_continuous(labels=comma) +
theme_bw() + labs(colour = "Predicted N Whales", xlab = "Longitude", ylab ="Latitude")
lzn.kriged %>% as.data.frame %>%
ggplot(aes(x=lzn.kriged@coords[,1], y=lzn.kriged@coords[,2])) + geom_tile(aes(fill=var1.pred)) + coord_equal() +
scale_fill_gradient(low = "black", high="yellow") +
scale_x_continuous(labels=comma) + scale_y_continuous(labels=comma) +
theme_bw() + labs(colour = "Predicted N Whales") + xlab("Longitude") + ylab("Latitude")
library(agricolae)
library(readxl)
setwd("~/Documents/R/DQ_R")
data <- read_excel('Cd Calculations - with success rate.xlsx',3)
bartlett.test(data$CD ~ data$Condition) # Method 1
bartlett.test(data$Duration ~ data$Condition) # Duration
bartlett.test(data$Uo ~ data$Condition) # initial velocity
tag <- as.factor(data$Condition)
Ind <- as.factor(data$Animal)
CdCorr <- data$CD
Cdlm <- lm(CdCorr ~ tag+Ind)
anova(Cdlm)
tukCd <-TukeyHSD(aov(Cdlm))
Durlm <- lm(data$Duration ~ tag+Ind)
anova(Durlm)
Ulm <- lm(data$Uo ~ tag+Ind)
anova(Ulm)
data <- read_excel('Cd Calculations - with success rate.xlsx',6)
tag <- as.factor(data$Condition)
CFD.linear.model <- lm(data$Cd ~ tag)
CFD.aov <- anova(CFD.linear.model)
data <- read_excel('Fish_CFD_Cd.xlsx')
View(data)
View(data)
data <- read_excel('Fish_CFD_Cd.xlsx',2)
View(data)
data <- read_excel('Fish_CFD_Cd.xlsx',2) # second sheet is formatted as transpose
tag <- as.factor(data$Condition)
CFD.linear.model <- lm(data$Cd ~ tag+Speed)
CFD.linear.model <- lm(data$Cd ~ tag+data$Speed)
CFD.aov <- anova(CFD.linear.model)
CFD.aov
plot(CFD.aov)
summary(CFD.aov)
tukdur
tukCFD <-TukeyHSD(aov(CFD.linear.model))
tukCFD
CFD.aov
tukCFD
